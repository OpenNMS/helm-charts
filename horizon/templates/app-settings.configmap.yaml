---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-settings
  namespace: {{ include "namespace" . }}
  labels:
    {{- include "core.labels" . | nindent 4 }}
data:
  TZ: {{ .Values.timezone | quote }}
  DOMAIN: {{ include "core.domain" . | quote }}
  POSTGRES_HOST: {{ .Values.dependencies.postgresql.hostname | quote }}
  POSTGRES_PORT: {{ .Values.dependencies.postgresql.port | quote }}
  POSTGRES_SSL_MODE: {{ .Values.dependencies.postgresql.sslmode | quote }}
  POSTGRES_SSL_FACTORY: {{ .Values.dependencies.postgresql.sslfactory | quote }}
  OPENNMS_DATABASE_CONNECTION_IDLETIMEOUT: {{ .Values.core.configuration.database.idleTimeout | default "3" | quote }}
  OPENNMS_DATABASE_CONNECTION_LOGINTIMEOUT: {{ .Values.core.configuration.database.loginTimeout | default "600" | quote }}
  OPENNMS_DATABASE_CONNECTION_MINPOOL: {{ .Values.core.configuration.database.minPool | default "25" | quote }}
  OPENNMS_DATABASE_CONNECTION_MAXPOOL: {{ .Values.core.configuration.database.maxPool | default "50" | quote }}
  ENABLE_ALEC: {{ ((.Values.core).configuration).enableAlec | default "false" | quote }}
  ENABLE_ACLS: {{ ((.Values.core).configuration).enableAcls | default "false" | quote }}
  CORE_SERVICE_ALARMD_ENABLED: {{ .Values.core.configuration.services.alarmd.enabled | quote }}
  CORE_SERVICE_BSMD_ENABLED: {{ .Values.core.configuration.services.bsmd.enabled | quote }}
  CORE_SERVICE_TICKETER_ENABLED: {{ .Values.core.configuration.services.ticketer.enabled | quote }}
  CORE_SERVICE_CORRELATOR_ENABLED: {{ .Values.core.configuration.services.correlator.enabled | quote }}
  CORE_SERVICE_QUEUED_ENABLED: {{ .Values.core.configuration.services.queued.enabled | quote }}
  CORE_SERVICE_ACTIOND_ENABLED: {{ .Values.core.configuration.services.actiond.enabled | quote }}
  CORE_SERVICE_NOTIFD_ENABLED: {{ .Values.core.configuration.services.notifd.enabled | quote }}
  CORE_SERVICE_SCRIPTD_ENABLED: {{ .Values.core.configuration.services.scriptd.enabled | quote }}
  CORE_SERVICE_RTCD_ENABLED: {{ .Values.core.configuration.services.rtcd.enabled | quote }}
  CORE_SERVICE_POLLERD_ENABLED: {{ .Values.core.configuration.services.pollerd.enabled | quote }}
  CORE_SERVICE_SNMPPOLLER_ENABLED: {{ .Values.core.configuration.services.snmpPoller.enabled | quote }}
  CORE_SERVICE_ENHANCEDLINKD_ENABLED: {{ .Values.core.configuration.services.enhancedLinkd.enabled | quote }}
  CORE_SERVICE_COLLECTD_ENABLED: {{ .Values.core.configuration.services.collectd.enabled | quote }}
  CORE_SERVICE_DISCOVERY_ENABLED: {{ .Values.core.configuration.services.discovery.enabled | quote }}
  CORE_SERVICE_VACUUMD_ENABLED: {{ .Values.core.configuration.services.vacuumd.enabled | quote }}
  CORE_SERVICE_EVENTTRANSLATOR_ENABLED: {{ .Values.core.configuration.services.eventTranslator.enabled | quote }}
  CORE_SERVICE_PASSIVESTATUSD_ENABLED: {{ .Values.core.configuration.services.passiveStatusd.enabled | quote }}
  CORE_SERVICE_STATSD_ENABLED: {{ .Values.core.configuration.services.statsd.enabled | quote }}
  CORE_SERVICE_PROVISIOND_ENABLED: {{ .Values.core.configuration.services.provisiond.enabled | quote }}
  CORE_SERVICE_REPORTD_ENABLED: {{ .Values.core.configuration.services.reportd.enabled | quote }}
  CORE_SERVICE_ACKD_ENABLED: {{ .Values.core.configuration.services.ackd.enabled | quote }}
  CORE_SERVICE_JETTYSERVER_ENABLED: {{ .Values.core.configuration.services.jettyServer.enabled | quote }}
  CORE_SERVICE_KARAFSTARTUPMONITOR_ENABLED: {{ .Values.core.configuration.services.karafStartupMonitor.enabled | quote }}
  CORE_SERVICE_TL1D_ENABLED: {{ .Values.core.configuration.services.tl1d.enabled | quote }}
  CORE_SERVICE_SYSLOGD_ENABLED: {{ .Values.core.configuration.services.syslogd.enabled | quote }}
  CORE_SERVICE_ASTERISKGATEWAY_ENABLED: {{ .Values.core.configuration.services.asteriskGateway.enabled | quote }}
  CORE_SERVICE_TELEMETRYD_ENABLED: {{ .Values.core.configuration.services.telemetryd.enabled | quote }}
  CORE_SERVICE_TRAPD_ENABLED: {{ .Values.core.configuration.services.trapd.enabled | quote }}
  CORE_SERVICE_PERSPECTIVEPOLLER_ENABLED: {{ .Values.core.configuration.services.perspectivePoller.enabled | quote }}
  ENABLE_TELEMETRYD: {{ if gt ((.Values.sentinel).replicaCount|int) 0 }}"true"{{ else }}"false"{{ end }}
  ENABLE_CORTEX: {{ ((.Values.core).configuration).enableCortex | quote }}
  ENABLE_TSS_DUAL_WRITE: {{ ((.Values.core).configuration).enableTssDualWrite | quote }}
  ENABLE_GRAFANA: {{ if gt ((.Values.grafana).replicaCount|int) 0 }}"true"{{ else }}"false"{{ end }}
  {{- if .Values.multiTenant }}
  OPENNMS_INSTANCE_ID: {{ .Release.Name | quote }}
  {{- else }}
  OPENNMS_INSTANCE_ID: ""
  {{- end }}
  OPENNMS_SERVER: {{ include "namespace" . | printf "onms-core.%s.svc" | quote }}
  {{- if .Values.multiTenant }}
  OPENNMS_DBNAME: {{ printf "%s_opennms" .Release.Name | quote }}
  {{- else }}
  OPENNMS_DBNAME: "opennms"
  {{- end }}
  {{- if ((.Values.core).configuration).rras }}
  OPENNMS_RRAS: {{ join ";" .Values.core.configuration.rras }}
  {{- end }}
  OPENNMS_ETC_UPDATE_POLICY: {{ .Values.core.configuration.etcUpdatePolicy }}
  {{- if ((.Values.core).configuration).enableCortex }}
  OPENNMS_TIMESERIES_STRATEGY: {{ .Values.core.configuration.timeSeriesStrategy | quote }}
  CORTEX_WRITE_URL: {{ .Values.dependencies.cortex.writeUrl | quote }}
  CORTEX_READ_URL: {{ .Values.dependencies.cortex.readUrl | quote }}
  CORTEX_MAX_CONCURRENT_HTTP_CONNECTIONS: {{ .Values.dependencies.cortex.maxConcurrentHttpConnections | quote }}
  CORTEX_WRITE_TIMEOUT: {{ .Values.dependencies.cortex.writeTimeoutInMs | quote }}
  CORTEX_READ_TIMEOUT: {{ .Values.dependencies.cortex.readTimeoutInMs | quote }}
  CORTEX_METRIC_CACHE_SIZE: {{ .Values.dependencies.cortex.metricCacheSize | quote }}
  CORTEX_EXTERNAL_TAGS_CACHE_SIZE: {{ .Values.dependencies.cortex.externalTagsCacheSize | quote }}
  CORTEX_BULKHEAD_MAX_WAIT_DURATION: {{ .Values.dependencies.cortex.bulkheadMaxWaitDuration | quote }}
  {{- if .Values.dependencies.cortex.organizationId }}
  CORTEX_ORGANIZATION_ID: {{ .Values.dependencies.cortex.organizationId | quote }}
  {{- end }}
  {{- end }}
  {{- if ((.Values.dependencies).elasticsearch).hostname }}
  ELASTICSEARCH_SERVER: {{ printf "%s:%d" .Values.dependencies.elasticsearch.hostname (.Values.dependencies.elasticsearch.port | int) | quote }}
  ELASTICSEARCH_INDEX_STRATEGY_FLOWS: {{ .Values.dependencies.elasticsearch.configuration.flows.indexStrategy | quote }}
  ELASTICSEARCH_REPLICATION_FACTOR: {{ .Values.dependencies.elasticsearch.configuration.flows.replicationFactor | quote }}
  ELASTICSEARCH_NUM_SHARDS: {{ .Values.dependencies.elasticsearch.configuration.flows.numShards | quote }}
  {{- end }}
  {{- if ((.Values.dependencies).kafka).hostname }}
  KAFKA_BOOTSTRAP_SERVER: {{ printf "%s:%d" .Values.dependencies.kafka.hostname (.Values.dependencies.kafka.port | default "9092" | int) | quote }}
  KAFKA_SASL_MECHANISM: {{ .Values.dependencies.kafka.configuration.saslMechanism | quote }}
  KAFKA_SECURITY_PROTOCOL: {{ .Values.dependencies.kafka.configuration.securityProtocol | quote }}
  {{- end }}
  GRAFANA_SERVER: {{ include "namespace" . | printf "grafana.%s.svc" | quote }}
  {{- if eq (include "onOpenShift" .) "true" }}
  GF_SERVER_DOMAIN: {{ printf "grafana-%s" (include "core.domain" .) | quote }} # Should match FQDN on the Ingress
  GF_SERVER_ROOT_URL: ""
  {{- else }}
  GF_SERVER_DOMAIN: {{ printf "grafana.%s" (include "core.domain" .) | quote }} # Should match FQDN on the Ingress
  GF_SERVER_ROOT_URL: "/"
  {{- end }}
  GF_DATABASE_TYPE: "postgres"
  {{- if .Values.multiTenant }}
  GF_DATABASE_NAME: {{ printf "%s_grafana" .Release.Name | quote }}
  {{- else }}
  GF_DATABASE_NAME: "grafana"
  {{- end }}
  GF_DATABASE_SSL_MODE: {{ (((.Values.grafana).configuration).database).sslmode | default "disable" | quote }}
  GF_DATABASE_CA_CERT_PATH: "/etc/java/jks/postgresql-ca.crt"
  GF_SESSION_PROVIDER: "postgres"
  ON_OPENSHIFT: {{ if eq (include "onOpenShift" .) "true" }}"true"{{ else }}"false"{{ end }}
