{{- $image := printf "%s:%s" .Values.core.image.repository (.Values.core.image.tag | default .Chart.AppVersion) -}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: onms-core
  namespace: {{ include "namespace" . }}
  labels:
    app: onms-core
    {{- include "core.labels" . | nindent 4 }}
spec:
  serviceName: onms-core
  {{- if .Values.core.inspector.enabled }}
  replicas: 0
  {{- else }}
  replicas: 1 # DO NOT CHANGE. The solution only allows 1 instance
  {{- end }}
  selector:
    matchLabels:
      app: onms-core
      {{- include "core.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: onms-core
        {{- include "core.selectorLabels" . | nindent 8 }}
      annotations:
      {{- if .Values.core.configuration.alwaysRollDeployment }}
        rollme: {{ randAlphaNum 5 | quote }}
      {{- end }}
      {{- if and (eq (include "onOpenShift" .) "true") ((.Values.dependencies.securitycontext).securitycontextconstraints.enabled) }}
        openshift.io/scc: {{ (.Values.dependencies.securitycontext).securitycontextconstraints.name | quote }} 
      {{- end }}
        kubectl.kubernetes.io/default-container: "onms"
    spec:
      {{- if and (eq (include "onOpenShift" .) "true") ((.Values.dependencies.securitycontext).serviceaccount.enabled) }}
      serviceAccountName: {{ (.Values.dependencies.securitycontext).serviceaccount.name | quote }} 
      {{- end }}
      securityContext:
          sysctls:
            - name: net.ipv4.ping_group_range
              value: "0           2147483647"
         {{- if eq (include "onOpenShift" .) "true" }}
          {{- if eq ((.Values.dependencies.securitycontext).allowPrivilegeEscalation) true }}
          fsGroup: 10001
          {{- end }}
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
         {{- else }}
          fsGroup: 10001
         {{- end }}
      terminationGracePeriodSeconds: {{ .Values.core.terminationGracePeriodSeconds | default 120 }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- range $k, $r := .Values.imagePullSecrets }}
        - name: {{ $r.name }}
        {{- end }}
      {{- end }}
      initContainers:
      {{- if and (.Values.core.configuration.enableAlec) (.Values.core.configuration.alecImage) }}
      - name: alec-kar
        image: {{ .Values.core.configuration.alecImage.repository }}:{{ .Values.core.configuration.alecImage.tag }}
        imagePullPolicy: {{ .Values.core.configuration.alecImage.pullPolicy }}
        command: [ cp, /plugins/opennms-alec-plugin.kar, /opennms-deploy ]
        {{- if eq (include "onOpenShift" .) "false" }}
        securityContext: # To guarantee ownership of the KAR file so that OpenNMS won't complain.
          runAsUser: 10001
          runAsGroup: 10001
        {{- end }}
        volumeMounts:
        - name: deploy
          mountPath: /opennms-deploy # Required by the init script - DEPLOY_DIR
      {{- end }}
      {{- if and (.Values.core.configuration.enableCortex) (.Values.core.configuration.cortexTssImage) }}
      - name: cortex-tss-kar
        image: {{ .Values.core.configuration.cortexTssImage.repository }}:{{ .Values.core.configuration.cortexTssImage.tag }}
        imagePullPolicy: {{ .Values.core.configuration.cortexTssImage.pullPolicy }}
        command: [ cp, /plugins/opennms-cortex-tss-plugin.kar, /opennms-deploy ]
        {{- if eq (include "onOpenShift" .) "false" }}
        securityContext: # To guarantee ownership of the KAR file so that OpenNMS won't complain.
          runAsUser: 10001
          runAsGroup: 10001
        {{- end }}
        volumeMounts:
        - name: deploy
          mountPath: /opennms-deploy # Required by the init script - DEPLOY_DIR
      {{- end }}
      # Initializes/Updates OpenNMS Configuration
      # Requires the same image/version used at runtime
      - name: init
        image: {{ $image }}
        imagePullPolicy: {{ .Values.core.image.pullPolicy }}
        securityContext:
        {{- if eq (include "onOpenShift" .) "true" }}
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
             - ALL
        {{- else }}
          fsGroup: 10001
        {{- end }}
        command: [ bash, /scripts/onms-core-init.sh ]
        envFrom:
        - configMapRef:
            name: app-settings
        - secretRef:
            name: app-credentials
        env:
        - name: OPENNMS_DATABASE_CONNECTION_MAXPOOL
          value: {{ .Values.core.configuration.database.poolSize | default "50" | quote }}
        volumeMounts:
        - name: etc
          mountPath: /opennms-etc # Required by the script - CONFIG_DIR
        - name: deploy
          mountPath: /opennms-deploy # Required by the script - DEPLOY_DIR
        - name: overlay
          mountPath: /opt/opennms-overlay # Required by the script - OVERLAY_DIR
        - name: scripts
          mountPath: /scripts # Required by the script
        {{- range $k, $r := .Values.core.overlayConfigMaps }}
        - name: overlay-configmap-{{ $k }}
          {{- if $r.unzip }}
            {{- if $r.path }}
              {{- printf "path not allowed when unzip is true for core.overlayConfigMaps with name '%s'" $r.name | fail }}
            {{- end }}
          mountPath: /opennms-overlay-configmaps/{{ $k }}-unzip
          {{- else }}
            {{- if empty $r.path }}
              {{- printf "path required for core.overlayConfigMaps with name '%s'" $r.name | fail }}
            {{- end }}
          mountPath: /opennms-overlay-configmaps/{{ $k }}/{{ $r.path }}
          {{- end }}
        {{- end }}
      {{- with .Values.core.initContainers }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      nodeSelector:
        {{- toYaml .Values.core.configuration.nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .Values.core.configuration.affinity | nindent 8 }}
      tolerations:
        {{- toYaml .Values.core.configuration.tolerations | nindent 8 }}
      containers:
      - name: onms
        image: {{ $image }}
        securityContext:
        {{- if eq (include "onOpenShift" .) "true" }}
          runAsNonRoot: true
          allowPrivilegeEscalation: {{ (.Values.dependencies.securitycontext).allowPrivilegeEscalation }}
          seccompProfile:
            type: RuntimeDefault
          capabilities:
          {{- if has "CAP_NET_RAW" (.Values.dependencies.securitycontext).allowedCapabilities }}
            add:
             - CAP_NET_RAW
          {{- else }}
            drop:
             - ALL
          {{- end }}
        {{- else }}
          fsGroup: 10001
        {{- end }}
        imagePullPolicy: {{ .Values.core.image.pullPolicy }}
        args:
        - -s
        ports:
        {{- if .Values.core.configuration.ports.syslog.enabled }}
        - containerPort: 8101
          name: karaf
        {{- end}}
        - containerPort: 8980
          name: http
        {{- if .Values.core.configuration.ports.trapd.enabled }}
        - containerPort: 1162
          name: trapd
        {{- end}}
        {{- if .Values.core.configuration.ports.syslog.enabled }}
        - containerPort: 10514
          name: syslog
        {{- end}}
        envFrom:
        - configMapRef:
            name: app-settings
        - secretRef:
            name: app-credentials
        volumeMounts:
        {{- if (include "core.enableTssDualWrite" .) }}
        - name: rrd
          mountPath: /opennms-data/rrd
        {{- end }}
        {{- if .Values.core.configuration.storage.mibs }}
        - name: mibs
          mountPath: /opt/opennms/share/mibs
        {{- end }}
        - name: etc
          mountPath: /opt/opennms/etc
        - name: deploy
          mountPath: /opennms-deploy
        - name: logs
          mountPath: /opt/opennms/logs
        - name: overlay
          mountPath: /opt/opennms-overlay
        - name: jks
          mountPath: /etc/java/jks
        - name: jks
          mountPath: /opt/opennms/.postgresql/root.crt
          subPath: postgresql-ca.crt
        env:
        {{- if .Values.core.env }}
        {{- range $key, $val := .Values.core.env }}
        - name: {{ $key }}
          value: {{ $val | quote }}
        {{- end }}
        {{- end }}
        {{- if eq (include "onOpenShift" .) "true" }}
        {{- if or (not (has "CAP_NET_RAW" ((.Values.dependencies).securitycontext).allowedCapabilities)) (eq (.Values.dependencies).securitycontext.allowPrivilegeEscalation false)  }}
        - name: JAVA_HOME
          value: /usr/lib/jvm/java-nocap
        {{- end }}   
        {{- end }}   
        {{- $opt :=  include "core.jvmOptions" . }}
        {{- if .Values.core.resources }}
        {{- with .Values.core.resources }}
        {{- if ((.requests).memory) }}
        - name: MEM_TOTAL_MB
          valueFrom:
            resourceFieldRef:
              resource: requests.memory
              divisor: 1Mi
        - name: JAVA_OPTS
          value: -Xms$(MEM_TOTAL_MB)m -Xmx$(MEM_TOTAL_MB)m {{ $opt }}
        {{- end }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- else }}
        - name: JAVA_OPTS
          value: {{ $opt }}
        {{- end }}
        startupProbe:
          httpGet:
            path: /opennms/login.jsp
            port: http
          failureThreshold: 30
          periodSeconds: 60
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /opennms/login.jsp
            port: http
          periodSeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /opennms/login.jsp
            port: http
          periodSeconds: 60
          timeoutSeconds: 5
      {{- if ((.Values.dependencies).loki).hostname }}
      - name: promtail
        image: {{ printf "%s:%s" .Values.promtail.image.repository (.Values.promtail.image.tag | default "latest") }}
        imagePullPolicy: {{ .Values.promtail.image.pullPolicy }}
        args:
        - -config.file=/etc/promtail/promtail.yaml
        volumeMounts:
        - name: logs
          mountPath: /opt/opennms/logs
        - name: jks
          mountPath: /etc/jks
        - name: promtail
          mountPath: /etc/promtail/promtail.yaml
          subPath: promtail.onms_core.config.yaml
        {{- with .Values.promtail.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- end }}
      volumes:
      - name: deploy
        emptyDir: {}
      - name: overlay
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: scripts
        configMap:
          name: app-scripts
      {{- if ((.Values.dependencies).loki).hostname }}
      - name: promtail
        configMap:
          name: promtail-config
      {{- end }}
      - name: jks
        secret:
          secretName: app-jks
      - name: etc
        persistentVolumeClaim:
          claimName: onms-etc-pvc
          readOnly: false
      {{- if (include "core.enableTssDualWrite" .) }}
      - name: rrd
        persistentVolumeClaim:
          claimName: onms-rrd-pvc
          readOnly: false
      {{- end }}
      {{- if .Values.core.configuration.storage.mibs }}
      - name: mibs
        persistentVolumeClaim:
          claimName: onms-mibs-pvc
          readOnly: false
      {{- end }}
      {{- range $k, $r := .Values.core.overlayConfigMaps }}
      - name: overlay-configmap-{{ $k }}
        configMap:
          name: {{ $r.name | quote }}
      {{- end }}
