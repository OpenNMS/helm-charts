# Default values for opennms.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

timezone: America/New_York
domain: example.com  # The common domain for the Ingress resource.
createNamespace: false  # Whether to create the namespace for this deployment

# Optionally specify an array of imagePullSecrets.
# Secrets must be manually created in the namespace.
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets:
 - name: poweredby
   dockerServer: docker.cloudsmith.io
   dockerUsername: morteza-ershad-manesh
   dockerPassword: admin
   dockerEmail: admin@agalue.net

dependencies:
 # Red Hat OpenShift related settings for creating Cluster Role and Binding
 clusterRole: true
 clusterRoleBinding: true

 # Red Hat OpenShift related settings for creating the required security context for OpenNMS Core
 securitycontext:
  allowedCapabilities:
   - NET_BIND_SERVICE
   - CAP_NET_RAW
  allowPrivilegeEscalation: true
  securitycontextconstraints:
   enabled: true
   name: opennms-scc
  serviceaccount:
   enabled: true
   name: opennms-sa

 # Red Hat OpenShift related settings for creating a route to OpenNMS Core pod
 route: true

 # A common JKS to white-list all CA certificates for all the dependencies OpenNMS or Sentinel uses.
 truststore:
  content: ''  # A base64 encoded content of the JKS Truststore file.
  password: '0p3nNM5'

 # The main OpenNMS database requires PostgreSQL (this is mandatory).
 postgresql:
  hostname: onms-db.shared.svc  # IP or FQDN of the external PostgreSQL server
  port: 5432
  username: postgres
  password: P0stgr3s
  sslmode: require  # disable, allow, prefer, require, verify-ca, verify-full
  sslfactory: org.postgresql.ssl.LibPQFactory  # LibPQFactory, DefaultJavaSSLFactory, NonValidatingFactory
  caCert: ''  # A base64 encoded content of the CA Certificate

 # The chosen broker technology for the Minion-to-OpenNMS communication (this is mandatory).
 # For TLS with private CA, use the common Truststore.
 kafka:
  hostname: ''  # IP or FQDN of the external Kafka server (Example: onms-kafka-bootstrap.shared.svc)
  port: 9093
  username: opennms  # Pass empty username when using saslMechanism=PLAIN
  password: 0p3nNM5  # Pass empty password when using saslMechanism=PLAIN
  configuration:
   saslMechanism: SCRAM-SHA-512  # PLAIN, SCRAM-SHA-512
   securityProtocol: SASL_SSL  # PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL

 # Persisting flows requires Elasticsearch
 # For TLS with private CA, use the common Truststore.
 elasticsearch:
  hostname: ''  # IP or FQDN of the external Elasticsearch server (Example: onms-es-http.shared.svc)
  port: 9200
  username: elastic
  password: 31@st1c
  configuration:
   flows:
    indexStrategy: daily
    replicationFactor: 0
    numShards: 1

 # The chosen solution for log aggregation (OpenNMS and Sentinel will forward logs to it via Promtail)
 loki:
  hostname: ''  # IP or FQDN of the external Loki server (Example: loki.shared.svc); '' to disable
  username: ''
  password: ''
  caCert: ''  # A base64 encoded content of the CA Certificate (assumes HTTPS for Loki's URL)
  port: 3100

 # The metrics persistence layer as an alternative to RRDtool.
 cortex:
  # Used only when opennms.configuration.enableCortex=true
  # See: https://github.com/OpenNMS/opennms-cortex-tss-plugin/blob/master/plugin/src/main/resources/OSGI-INF/blueprint/blueprint.xml
  writeUrl: http://cortex-distributor.shared.svc.cluster.local:8080/api/v1/push
  readUrl: http://cortex-query-frontend.shared.svc.cluster.local:8080/prometheus/api/v1
  maxConcurrentHttpConnections: 100
  writeTimeoutInMs: 1000
  readTimeoutInMs: 1000
  metricCacheSize: 1000
  externalTagsCacheSize: 1000
  bulkheadMaxWaitDuration: '9223372036854775807'  # this is set as a string so it doesn't end up in scientific notation along the way which causes problems later

# The Ingress to expose the OpenNMS and Grafana.
ingress:
 className: nginx
 annotations: {}
 certManager:
  clusterIssuer: opennms-issuer

# OpenNMS Core Instance.
core:
 inspector:
  enabled: false
 terminationGracePeriodSeconds: 120
 image:
  repository: opennms/horizon
  pullPolicy: IfNotPresent
  tag: ''  # Defaults to the chart appVersion
 resources:
  limits:
   cpu: '2'
   memory: 8Gi
  requests:
   cpu: '2'
   memory: 4Gi
 configuration:
  alwaysRollDeployment: true
  enableAlec: false  # See alecImage below for how the KAR is retrieved
  enableCortex: false  # See cortexTssImage below for how the KAR is retrieved
  enableTssDualWrite: false
  enableAcls: false
  rras:  # To optionally replace the RRDtool aggregations (pass [] to keep defaults). Affects Pollerd and Collectd
  - RRA:AVERAGE:0.5:1:2016
  - RRA:AVERAGE:0.5:12:1488
  - RRA:AVERAGE:0.5:288:366
  - RRA:MAX:0.5:288:366
  - RRA:MIN:0.5:288:366
  # If alecImage is specified, the KAR is retrieved from the specified Docker image used as an initContainer, otherwise the latest release in GitHub is retrieved
  alecImage: {}
  # repository: opennms/alec
  # pullPolicy: IfNotPresent
  # tag: v2.0.0
  # If cortexTssImage is specified, the KAR is retrieved from the specified Docker image used as an initContainer, otherwise the latest release in GitHub is retrieved
  cortexTssImage: {}
  # repository: opennms/opennms-cortex-tss-plugin
  # pullPolicy: IfNotPresent
  # tag: v2.0.1
  database:  # Access to the OpenNMS database
   username: opennms
   password: 0p3nNM5
   poolSize: 50
  storage:  # Sizes for RRDs and configuration
   etc: 1Gi  # Warning Google Filestore enforces 1TB at a minimum
   rrd: 1000Gi  # Depends on how many files you are planning to have (each installation is different)
   mibs: null  # Expects a size, e.g.: 1Gi
  http:  # Credentials to access the WebUI
   restUsername: opennms  # ReST user for Grafana/Helm, Sentinel and Minions (when Twin API is not available)
   restPassword: admin
   adminPassword: admin  # Password for the default admin account
  etcUpdatePolicy: never  # Experimental: options: never (don't update any files), newer (only newer timestamps), new (only brand new files)
  nodeSelector: null
  affinity: null
  tolerations: null
 postConfigJob:
  ttlSecondsAfterFinished: 300

# OpenNMS Sentinel for flow processing (Optional)
sentinel:
 replicaCount: 0  # Use 0 to disable
 terminationGracePeriodSeconds: 60
 image:
  repository: opennms/sentinel
  pullPolicy: IfNotPresent
  tag: ''  # Defaults to the chart appVersion
 resources:
  limits:
   cpu: '2'
   memory: 4Gi
  requests:
   cpu: '2'
   memory: 2Gi
 configuration:
  database:
   poolSize: 25

# OpenNMS Plugin for Grafana
# Do not use Grafana images, or you'd have to manually install the OpenNMS Plugin for Grafana from Github every time the container starts.
grafana:
 replicaCount: 0
 image:
  repository: opennms/helm
  pullPolicy: IfNotPresent
  tag: '9.0.9'
 resources:
  limits:
   cpu: 200m
   memory: 1Gi
  requests:
   cpu: 100m
   memory: 1Gi
 configuration:
  ui:
   adminPassword: 0p3nNM5  # Default password for the admin account
  database:  # Assumes PostgreSQL
   username: grafana
   password: Gr@f@n@
   sslmode: require  # disable, require, verify-full
   image:  # For the initialization container to create the database
    repository: postgres
    pullPolicy: IfNotPresent
    tag: '13'
 imageRenderer:  # Required to generate PDF reports from OpenNMS
  replicaCount: 2
  image:
   repository: grafana/grafana-image-renderer
   pullPolicy: IfNotPresent
   tag: latest
  resources:
   limits:
    cpu: 200m
    memory: 256Mi
   requests:
    cpu: 100m
    memory: 128Mi

# Log aggregator configured as a sidecar for OpenNMS and Sentinel
promtail:
 image:
  repository: grafana/promtail
  pullPolicy: IfNotPresent
  tag: latest
 resources:
  limits:
   cpu: 50m
   memory: 64Mi
